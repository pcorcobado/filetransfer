name: Deploy CERT

on: 
  push:
    branches: [develop]
    paths: [src/**]

jobs:
  deploy_cert:
    runs-on: ubuntu-latest
    environment: CERT
    steps:
      - uses: actions/checkout@v3
        with:
            token: ${{ secrets.GH_TOKEN }}
      - uses: actions/checkout@v3
        with:
          repository: pcorcobado/ansible-playbook
          token: ${{ secrets.GH_TOKEN }}
          path: ansible
          ref: 'main'
      - uses: actions/checkout@v3
        with:
          repository: pcorcobado/filetransfer-inventory
          token: ${{ secrets.GH_TOKEN }}
          path: inventory
          ref: 'main'
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Build snapshoot
        run: |
          mvn -ntp -B clean verify -DskipITs=true
      - name: Unit Testing
        run: |
          echo -e "UNIT TESTING\n"
      - name: Code Analysis
        run: |
          echo -e "CODE ANALYSIS\n"
      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }} 
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }} 
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Publishing code
        run: |
          VERSION=`grep "\-SNAPSHOT</version>" pom.xml | sed 's/.*<version>//' | sed 's/-SNAPSHOT<\/version>//'`
          ARTIFACTID=`grep -m 1 "<artifactId>" pom.xml | sed 's/.*<artifactId>//' | sed 's/<\/artifactId>//'`
          GROUPID=`grep -m 1 "<groupId>" pom.xml | sed 's/.*<groupId>//' | sed 's/<\/groupId>//' | sed 's/\./\//g'`
          ARTIFACT="${ARTIFACTID}-${VERSION}-SNAPSHOT.zip"
          NEW_VERSION=`echo ${VERSION} | awk -F "." '{printf "%s.%s.%s", $1, $2, $3+1}'`
          
          echo "------------------------------------------"
          echo ${VERSION}
          echo ${ARTIFACTID}
          echo ${GROUPID}
          echo ${ARTIFACT}
          echo ${NEW_VERSION}
          echo -e "------------------------------------------\n\n\n"
          
          AWS_TOKEN=`aws codeartifact get-authorization-token --domain ${{ secrets.CODEARTIFACT_DOMAIN }} --query authorizationToken --output text`
          AWS_REPOSITORY_URL=`aws codeartifact get-repository-endpoint --domain ${{ secrets.CODEARTIFACT_DOMAIN }} --repository ${{ secrets.CODEARTIFACT_REPOSITORY }} --format maven --output text` 
          
          echo "------------------------------------------"
          echo -e "\n\n${AWS_REPOSITORY_URL}${GROUPID}/${ARTIFACTID}/${VERSION}/${ARTIFACT}\n\n"
          echo -e "pcm:${AWS_TOKEN}\n\n"
          echo -e "target/${ARTIFACT}\n\n"
          echo "------------------------------------------"
          
          
          curl --request PUT ${AWS_REPOSITORY_URL}${GROUPID}/${ARTIFACTID}/${VERSION}/${ARTIFACT} \
          --user "pcm:${AWS_TOKEN}" --header "Content-Type: application/octet-stream" \
          --data-binary "@target/${ARTIFACT}"
          
          git config --global user.email "corcobadopedro@gmail.com"
          git config --global user.name "corcobadopedro"
          mvn -ntp versions:set -DnewVersion=${NEW_VERSION}-SNAPSHOT -DgenerateBackupPoms=false
          git commit --allow-empty -am "chore: updating for ${NEW_VERSION}-SNAPSHOT develop [skip ci]"
          git push
      - name: get runner ip address
        id: ip
        uses: haythem/public-ip@v1.3
      - name: Print Public IP
        run: |
          echo ${{ steps.ip.outputs.ipv4 }}
      - name: whitelist runner ip address
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-name ${{ secrets.AWS_SG }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
      # aws ec2 create-network-acl-entry --network-acl-id acl-5fb85d36 --ingress --rule-number 100 --protocol udp --port-range From=53,To=53 --cidr-block 0.0.0.0/0 --rule-action allow
      - name: Deploy CERT
        run: |
          echo -e "ESTOY EN DEPLOY CERT\n"
          ls -lR
          ansible-playbook --user ubuntu -i inventory/CERT/host ansible/deploy_filetransfer.yml -e "artifactId=${ARTIFACTID}" -e "version=${VERSION}" -e "target=CERT" -e "workspace=target"
      - name: revoke runner ip address
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-name ${{ secrets.AWS_SG }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
