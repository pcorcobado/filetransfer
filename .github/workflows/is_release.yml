name: filetransfer ci/cd

on: 
  release:
    types: [published]
    branches: [develop]

jobs:
  deploy_cert:
    runs-on: ubuntu-latest
    environment: PRE
    steps:
      - uses: actions/checkout@v3
        with:
            token: ${{ secrets.GH_TOKEN }}
            ref: 'develop'
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Update snapshoot
        run: |
          export VERSION=`grep "\-SNAPSHOT</version>" pom.xml | sed 's/.*<version>//' | sed 's/-SNAPSHOT<\/version>//' | awk -F "." '{printf "%s.%s.%s", $1, $2, 0}'`
          export NEW_VERSION=`echo ${VERSION} | awk -F "." '{printf "%s.%s.%s", $1+1, $2, $3}'`
          export timestamp="111111111111"

          git ls-remote --tags origin v${VERSION}
          git ls-remote --heads origin release-*
          git checkout develop
          git checkout -b release-${VERSION}-${timestamp} develop
          mvn -ntp versions:set -DnewVersion=${VERSION} -DgenerateBackupPoms=false
          git commit --allow-empty -am "chore: updating branch release-${VERSION}-${timestamp} with non-snapshot versions"
          git checkout develop
          mvn -ntp versions:set -DnewVersion=${NEW_VERSION}-SNAPSHOT -DgenerateBackupPoms=false
          git commit --allow-empty -am "chore: updating for ${NEW_VERSION}-SNAPSHOT develop [skip ci]"
          git merge --no-ff -m "Merge branch release-${VERSION}-${timestamp} into develop [skip ci]" -s ours release-${VERSION}-${timestamp}
          git remote set-branches origin "*"
          git fetch
          git checkout main
          git merge --no-ff release-${VERSION}-${timestamp}
          git branch -D release-${VERSION}-${timestamp}
          mvn -B clean verify
          git push origin main
          git checkout develop
          git push origin develop
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Publishing RELEASE
        run: |
          echo -e "ESTOY EN CODEARTIFACT\n"
          export VERSION=`grep -m 1 "<version>" pom.xml | sed 's/.*<version>//' | sed 's/-SNAPSHOT<\/version>//' | awk -F "." '{printf "%s.%s.%s", $1-1, $2, $3}'`
          export ARTIFACTID=`grep -m 1 "<artifactId>" pom.xml | sed 's/.*<artifactId>//' | sed 's/<\/artifactId>//'`
          export GROUPID=`grep -m 1 "<groupId>" pom.xml | sed 's/.*<groupId>//' | sed 's/<\/groupId>//' | sed 's/\./\//g'`
          export ARTIFACT="${ARTIFACTID}-${VERSION}.zip"
                    
          echo "------------------------------------------"
          echo ${VERSION}
          echo ${ARTIFACTID}
          echo ${GROUPID}
          echo ${ARTIFACT}
          echo ${NEW_VERSION}
          echo -e "------------------------------------------\n\n\n"
          
          #export AWS_TOKEN=`aws codeartifact get-authorization-token --domain ${{ secrets.CODEARTIFACT_DOMAIN }} --query authorizationToken --output text`
          #export AWS_REPOSITORY_URL=`aws codeartifact get-repository-endpoint --domain ${{ secrets.CODEARTIFACT_DOMAIN }} --repository ${{ secrets.CODEARTIFACT_REPOSITORY }} --format maven --output text` 
          
          echo "------------------------------------------"
          #echo -e "\n\n${AWS_REPOSITORY_URL}${GROUPID}/${ARTIFACTID}/${VERSION}/${ARTIFACT}\n\n"
          #echo -e "pcm:${AWS_TOKEN}\n\n"
          #echo -e "target/${ARTIFACT}\n\n"
          echo "------------------------------------------"
          
          
          #curl --request PUT ${AWS_REPOSITORY_URL}${GROUPID}/${ARTIFACTID}/${VERSION}/${ARTIFACT} \
          #--user "pcm:${AWS_TOKEN}" --header "Content-Type: application/octet-stream" \
          #--data-binary "@target/${ARTIFACT}"
    
