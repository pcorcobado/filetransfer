name: Deploy PRO

on: 
  workflow_run:
    workflows: ["Deploy PRE"]
    types:
      - completed
jobs:
  deploy_PRO:
    runs-on: ubuntu-latest
    environment: PRO
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - uses: actions/checkout@v3
        with:
            token: ${{ secrets.GH_TOKEN }}
            ref: 'main'
      - uses: actions/checkout@v3
        with:
          repository: pcorcobado/ansible-playbook
          token: ${{ secrets.GH_TOKEN }}
          path: ansible
          ref: 'main'
      - uses: actions/checkout@v3
        with:
          repository: pcorcobado/filetransfer-inventory
          token: ${{ secrets.GH_TOKEN }}
          path: inventory
          ref: 'main'
      - name: Get artifact
        id: gartif
        run: |
          VERSION=`grep -m 1 "</version>" pom.xml | sed 's/.*<version>//' | sed 's/<\/version>//'`
          ARTIFACTID=`grep -m 1 "<artifactId>" pom.xml | sed 's/.*<artifactId>//' | sed 's/<\/artifactId>//'`
          GROUPID=`grep -m 1 "<groupId>" pom.xml | sed 's/.*<groupId>//' | sed 's/<\/groupId>//' | sed 's/\./\//g'`
          ARTIFACT="${ARTIFACTID}-${VERSION}.zip"
          
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "ARTIFACTID=$ARTIFACTID" >> $GITHUB_OUTPUT
          
          echo -e "aws codeartifact get-package-version-asset --domain ${{ secrets.CODEARTIFACT_DOMAIN }} --repository ${{ secrets.CODEARTIFACT_REPOSITORY }} --format maven --namespace ${GROUPID} --package ${ARTIFACTID} --package-version ${VERSION} --asset ${ARTIFACT} target/${ARTIFACT}"
          
          aws codeartifact get-package-version-asset --domain ${{ secrets.CODEARTIFACT_DOMAIN }} --repository ${{ secrets.CODEARTIFACT_REPOSITORY }} \
          --format maven --namespace ${GROUPID} --package ${ARTIFACTID} --package-version ${VERSION} \
          --asset ${ARTIFACT} \
          target/${ARTIFACT}
      - name: get runner ip address
        id: ip
        uses: haythem/public-ip@v1.3
      - name: Print Public IP
        run: |
          echo ${{ steps.ip.outputs.ipv4 }}
      - name: whitelist runner ip address
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.AWS_SG }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
      - name: Deploy PRO
        id: dpre
        run: |
          echo -e "ESTOY EN DEPLOY PRO\n"
          ls -lR
          echo "------------------------------------------"
          echo ${{ steps.gartif.outputs.VERSION }}
          echo ${{ steps.gartif.outputs.ARTIFACTID }}
          echo -e "------------------------------------------\n\n\n"
          ansible-playbook --user ubuntu -i inventory/PRO/host ansible/deploy_filetransfer.yml -e "artifactId=${{ steps.gartif.outputs.ARTIFACTID }}" -e "version=${{ steps.gartif.outputs.VERSION }}" -e "target=PRO" -e "workspace=${PWD}"
      - name: revoke runner ip address
        if: success() || steps.dpre.conclusion == 'failure'
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.AWS_SG }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
